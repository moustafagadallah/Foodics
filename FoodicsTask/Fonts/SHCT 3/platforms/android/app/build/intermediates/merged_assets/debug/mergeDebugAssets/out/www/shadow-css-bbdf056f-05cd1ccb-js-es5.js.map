{"version":3,"sources":["node_modules/@ionic/core/dist/esm/shadow-css-bbdf056f-05cd1ccb.js"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n *\n * This file is a port of shadowCSS from webcomponents.js to TypeScript.\n * https://github.com/webcomponents/webcomponentsjs/blob/4efecd7e0e/src/ShadowCSS/ShadowCSS.js\n * https://github.com/angular/angular/blob/master/packages/compiler/src/shadow_css.ts\n */\nclass ShadowCss {\n    constructor() {\n        this.strictStyling = true;\n    }\n    shimCssText(cssText, scopeId, hostScopeId = '', slotScopeId = '', commentOriginalSelector = false) {\n        const commentsWithHash = extractCommentsWithHash(cssText);\n        cssText = stripComments(cssText);\n        const orgSelectors = [];\n        if (commentOriginalSelector) {\n            const processCommentedSelector = (rule) => {\n                const placeholder = `/*!@___${orgSelectors.length}___*/`;\n                const comment = `/*!@${rule.selector}*/`;\n                orgSelectors.push({ placeholder, comment });\n                rule.selector = placeholder + rule.selector;\n                return rule;\n            };\n            cssText = processRules(cssText, rule => {\n                if (rule.selector[0] !== '@') {\n                    return processCommentedSelector(rule);\n                }\n                else if (rule.selector.startsWith('@media') || rule.selector.startsWith('@supports') ||\n                    rule.selector.startsWith('@page') || rule.selector.startsWith('@document')) {\n                    rule.content = processRules(rule.content, processCommentedSelector);\n                    return rule;\n                }\n                return rule;\n            });\n        }\n        const scopedCssText = this._scopeCssText(cssText, scopeId, hostScopeId, slotScopeId, commentOriginalSelector);\n        cssText = [scopedCssText, ...commentsWithHash].join('\\n');\n        if (commentOriginalSelector) {\n            orgSelectors.forEach(({ placeholder, comment }) => {\n                cssText = cssText.replace(placeholder, comment);\n            });\n        }\n        return cssText;\n    }\n    _scopeCssText(cssText, scopeId, hostScopeId, slotScopeId, commentOriginalSelector) {\n        // replace :host and :host-context -shadowcsshost and -shadowcsshost respectively\n        cssText = this._insertPolyfillHostInCssText(cssText);\n        cssText = this._convertColonHost(cssText);\n        cssText = this._convertColonHostContext(cssText);\n        cssText = this._convertColonSlotted(cssText, slotScopeId);\n        cssText = this._convertShadowDOMSelectors(cssText);\n        if (scopeId) {\n            cssText = this._scopeSelectors(cssText, scopeId, hostScopeId, slotScopeId, commentOriginalSelector);\n        }\n        cssText = cssText.replace(/-shadowcsshost-no-combinator/g, `.${hostScopeId}`);\n        cssText = cssText.replace(/>\\s*\\*\\s+([^{, ]+)/gm, ' $1 ');\n        return cssText.trim();\n    }\n    /*\n     * convert a rule like :host(.foo) > .bar { }\n     *\n     * to\n     *\n     * .foo<scopeName> > .bar\n    */\n    _convertColonHost(cssText) {\n        return this._convertColonRule(cssText, _cssColonHostRe, this._colonHostPartReplacer);\n    }\n    /*\n   * convert a rule like ::slotted(.foo) { }\n  */\n    _convertColonSlotted(cssText, slotAttr) {\n        const regExp = _cssColonSlottedRe;\n        return cssText.replace(regExp, (...m) => {\n            if (m[2]) {\n                const compound = m[2].trim();\n                const suffix = m[3];\n                const sel = '.' + slotAttr + ' > ' + compound + suffix;\n                return sel;\n            }\n            else {\n                return _polyfillHostNoCombinator + m[3];\n            }\n        });\n    }\n    /*\n     * convert a rule like :host-context(.foo) > .bar { }\n     *\n     * to\n     *\n     * .foo<scopeName> > .bar, .foo scopeName > .bar { }\n     *\n     * and\n     *\n     * :host-context(.foo:host) .bar { ... }\n     *\n     * to\n     *\n     * .foo<scopeName> .bar { ... }\n    */\n    _convertColonHostContext(cssText) {\n        return this._convertColonRule(cssText, _cssColonHostContextRe, this._colonHostContextPartReplacer);\n    }\n    _convertColonRule(cssText, regExp, partReplacer) {\n        // m[1] = :host(-context), m[2] = contents of (), m[3] rest of rule\n        return cssText.replace(regExp, (...m) => {\n            if (m[2]) {\n                const parts = m[2].split(',');\n                const r = [];\n                for (let i = 0; i < parts.length; i++) {\n                    const p = parts[i].trim();\n                    if (!p)\n                        break;\n                    r.push(partReplacer(_polyfillHostNoCombinator, p, m[3]));\n                }\n                return r.join(',');\n            }\n            else {\n                return _polyfillHostNoCombinator + m[3];\n            }\n        });\n    }\n    _colonHostContextPartReplacer(host, part, suffix) {\n        if (part.indexOf(_polyfillHost) > -1) {\n            return this._colonHostPartReplacer(host, part, suffix);\n        }\n        else {\n            return host + part + suffix + ', ' + part + ' ' + host + suffix;\n        }\n    }\n    _colonHostPartReplacer(host, part, suffix) {\n        return host + part.replace(_polyfillHost, '') + suffix;\n    }\n    /*\n     * Convert combinators like ::shadow and pseudo-elements like ::content\n     * by replacing with space.\n    */\n    _convertShadowDOMSelectors(cssText) {\n        return _shadowDOMSelectorsRe.reduce((result, pattern) => result.replace(pattern, ' '), cssText);\n    }\n    // change a selector like 'div' to 'name div'\n    _scopeSelectors(cssText, scopeSelector, hostSelector, slotSelector, commentOriginalSelector) {\n        return processRules(cssText, (rule) => {\n            let selector = rule.selector;\n            let content = rule.content;\n            if (rule.selector[0] !== '@') {\n                selector =\n                    this._scopeSelector(rule.selector, scopeSelector, hostSelector, slotSelector, this.strictStyling);\n            }\n            else if (rule.selector.startsWith('@media') || rule.selector.startsWith('@supports') ||\n                rule.selector.startsWith('@page') || rule.selector.startsWith('@document')) {\n                content = this._scopeSelectors(rule.content, scopeSelector, hostSelector, slotSelector, commentOriginalSelector);\n            }\n            selector = selector.replace(/\\s{2,}/g, ' ').trim();\n            return new CssRule(selector, content);\n        });\n    }\n    _scopeSelector(selector, scopeSelector, hostSelector, slotSelector, strict) {\n        return selector.split(',')\n            .map(shallowPart => {\n            if (slotSelector && shallowPart.indexOf('.' + slotSelector) > -1) {\n                return shallowPart.trim();\n            }\n            if (this._selectorNeedsScoping(shallowPart, scopeSelector)) {\n                return strict ?\n                    this._applyStrictSelectorScope(shallowPart, scopeSelector, hostSelector).trim() :\n                    this._applySelectorScope(shallowPart, scopeSelector, hostSelector).trim();\n            }\n            else {\n                return shallowPart.trim();\n            }\n        })\n            .join(', ');\n    }\n    _selectorNeedsScoping(selector, scopeSelector) {\n        const re = this._makeScopeMatcher(scopeSelector);\n        return !re.test(selector);\n    }\n    _makeScopeMatcher(scopeSelector) {\n        const lre = /\\[/g;\n        const rre = /\\]/g;\n        scopeSelector = scopeSelector.replace(lre, '\\\\[').replace(rre, '\\\\]');\n        return new RegExp('^(' + scopeSelector + ')' + _selectorReSuffix, 'm');\n    }\n    _applySelectorScope(selector, scopeSelector, hostSelector) {\n        // Difference from webcomponents.js: scopeSelector could not be an array\n        return this._applySimpleSelectorScope(selector, scopeSelector, hostSelector);\n    }\n    // scope via name and [is=name]\n    _applySimpleSelectorScope(selector, scopeSelector, hostSelector) {\n        // In Android browser, the lastIndex is not reset when the regex is used in String.replace()\n        _polyfillHostRe.lastIndex = 0;\n        if (_polyfillHostRe.test(selector)) {\n            const replaceBy = this.strictStyling ? `.${hostSelector}` : scopeSelector;\n            return selector\n                .replace(_polyfillHostNoCombinatorRe, (_, selector) => {\n                return selector.replace(/([^:]*)(:*)(.*)/, (_, before, colon, after) => {\n                    return before + replaceBy + colon + after;\n                });\n            })\n                .replace(_polyfillHostRe, replaceBy + ' ');\n        }\n        return scopeSelector + ' ' + selector;\n    }\n    _applyStrictSelectorScope(selector, scopeSelector, hostSelector) {\n        const isRe = /\\[is=([^\\]]*)\\]/g;\n        scopeSelector = scopeSelector.replace(isRe, (_, ...parts) => parts[0]);\n        const className = '.' + scopeSelector;\n        const _scopeSelectorPart = (p) => {\n            let scopedP = p.trim();\n            if (!scopedP) {\n                return '';\n            }\n            if (p.indexOf(_polyfillHostNoCombinator) > -1) {\n                scopedP = this._applySimpleSelectorScope(p, scopeSelector, hostSelector);\n            }\n            else {\n                // remove :host since it should be unnecessary\n                const t = p.replace(_polyfillHostRe, '');\n                if (t.length > 0) {\n                    const matches = t.match(/([^:]*)(:*)(.*)/);\n                    if (matches) {\n                        scopedP = matches[1] + className + matches[2] + matches[3];\n                    }\n                }\n            }\n            return scopedP;\n        };\n        const safeContent = new SafeSelector(selector);\n        selector = safeContent.content();\n        let scopedSelector = '';\n        let startIndex = 0;\n        let res;\n        const sep = /( |>|\\+|~(?!=))\\s*/g;\n        // If a selector appears before :host it should not be shimmed as it\n        // matches on ancestor elements and not on elements in the host's shadow\n        // `:host-context(div)` is transformed to\n        // `-shadowcsshost-no-combinatordiv, div -shadowcsshost-no-combinator`\n        // the `div` is not part of the component in the 2nd selectors and should not be scoped.\n        // Historically `component-tag:host` was matching the component so we also want to preserve\n        // this behavior to avoid breaking legacy apps (it should not match).\n        // The behavior should be:\n        // - `tag:host` -> `tag[h]` (this is to avoid breaking legacy apps, should not match anything)\n        // - `tag :host` -> `tag [h]` (`tag` is not scoped because it's considered part of a\n        //   `:host-context(tag)`)\n        const hasHost = selector.indexOf(_polyfillHostNoCombinator) > -1;\n        // Only scope parts after the first `-shadowcsshost-no-combinator` when it is present\n        let shouldScope = !hasHost;\n        while ((res = sep.exec(selector)) !== null) {\n            const separator = res[1];\n            const part = selector.slice(startIndex, res.index).trim();\n            shouldScope = shouldScope || part.indexOf(_polyfillHostNoCombinator) > -1;\n            const scopedPart = shouldScope ? _scopeSelectorPart(part) : part;\n            scopedSelector += `${scopedPart} ${separator} `;\n            startIndex = sep.lastIndex;\n        }\n        const part = selector.substring(startIndex);\n        shouldScope = shouldScope || part.indexOf(_polyfillHostNoCombinator) > -1;\n        scopedSelector += shouldScope ? _scopeSelectorPart(part) : part;\n        // replace the placeholders with their original values\n        return safeContent.restore(scopedSelector);\n    }\n    _insertPolyfillHostInCssText(selector) {\n        selector = selector\n            .replace(_colonHostContextRe, _polyfillHostContext)\n            .replace(_colonHostRe, _polyfillHost)\n            .replace(_colonSlottedRe, _polyfillSlotted);\n        return selector;\n    }\n}\nclass SafeSelector {\n    constructor(selector) {\n        this.placeholders = [];\n        this.index = 0;\n        // Replaces attribute selectors with placeholders.\n        // The WS in [attr=\"va lue\"] would otherwise be interpreted as a selector separator.\n        selector = selector.replace(/(\\[[^\\]]*\\])/g, (_, keep) => {\n            const replaceBy = `__ph-${this.index}__`;\n            this.placeholders.push(keep);\n            this.index++;\n            return replaceBy;\n        });\n        // Replaces the expression in `:nth-child(2n + 1)` with a placeholder.\n        // WS and \"+\" would otherwise be interpreted as selector separators.\n        this._content = selector.replace(/(:nth-[-\\w]+)(\\([^)]+\\))/g, (_, pseudo, exp) => {\n            const replaceBy = `__ph-${this.index}__`;\n            this.placeholders.push(exp);\n            this.index++;\n            return pseudo + replaceBy;\n        });\n    }\n    restore(content) {\n        return content.replace(/__ph-(\\d+)__/g, (_, index) => this.placeholders[+index]);\n    }\n    content() { return this._content; }\n}\nclass CssRule {\n    constructor(selector, content) {\n        this.selector = selector;\n        this.content = content;\n    }\n}\nclass StringWithEscapedBlocks {\n    constructor(escapedString, blocks) {\n        this.escapedString = escapedString;\n        this.blocks = blocks;\n    }\n}\nconst _polyfillHost = '-shadowcsshost';\nconst _polyfillSlotted = '-shadowcssslotted';\n// note: :host-context pre-processed to -shadowcsshostcontext.\nconst _polyfillHostContext = '-shadowcsscontext';\nconst _parenSuffix = ')(?:\\\\((' +\n    '(?:\\\\([^)(]*\\\\)|[^)(]*)+?' +\n    ')\\\\))?([^,{]*)';\nconst _cssColonHostRe = new RegExp('(' + _polyfillHost + _parenSuffix, 'gim');\nconst _cssColonHostContextRe = new RegExp('(' + _polyfillHostContext + _parenSuffix, 'gim');\nconst _cssColonSlottedRe = new RegExp('(' + _polyfillSlotted + _parenSuffix, 'gim');\nconst _polyfillHostNoCombinator = _polyfillHost + '-no-combinator';\nconst _polyfillHostNoCombinatorRe = /-shadowcsshost-no-combinator([^\\s]*)/;\nconst _shadowDOMSelectorsRe = [\n    /::shadow/g,\n    /::content/g\n];\nconst _selectorReSuffix = '([>\\\\s~+\\[.,{:][\\\\s\\\\S]*)?$';\nconst _polyfillHostRe = /-shadowcsshost/gim;\nconst _colonHostRe = /:host/gim;\nconst _colonSlottedRe = /::slotted/gim;\nconst _colonHostContextRe = /:host-context/gim;\nconst _commentRe = /\\/\\*\\s*[\\s\\S]*?\\*\\//g;\nconst stripComments = (input) => {\n    return input.replace(_commentRe, '');\n};\nconst _commentWithHashRe = /\\/\\*\\s*#\\s*source(Mapping)?URL=[\\s\\S]+?\\*\\//g;\nconst extractCommentsWithHash = (input) => {\n    return input.match(_commentWithHashRe) || [];\n};\nconst _ruleRe = /(\\s*)([^;\\{\\}]+?)(\\s*)((?:{%BLOCK%}?\\s*;?)|(?:\\s*;))/g;\nconst _curlyRe = /([{}])/g;\nconst OPEN_CURLY = '{';\nconst CLOSE_CURLY = '}';\nconst BLOCK_PLACEHOLDER = '%BLOCK%';\nconst processRules = (input, ruleCallback) => {\n    const inputWithEscapedBlocks = escapeBlocks(input);\n    let nextBlockIndex = 0;\n    return inputWithEscapedBlocks.escapedString.replace(_ruleRe, (...m) => {\n        const selector = m[2];\n        let content = '';\n        let suffix = m[4];\n        let contentPrefix = '';\n        if (suffix && suffix.startsWith('{' + BLOCK_PLACEHOLDER)) {\n            content = inputWithEscapedBlocks.blocks[nextBlockIndex++];\n            suffix = suffix.substring(BLOCK_PLACEHOLDER.length + 1);\n            contentPrefix = '{';\n        }\n        const rule = ruleCallback(new CssRule(selector, content));\n        return `${m[1]}${rule.selector}${m[3]}${contentPrefix}${rule.content}${suffix}`;\n    });\n};\nconst escapeBlocks = (input) => {\n    const inputParts = input.split(_curlyRe);\n    const resultParts = [];\n    const escapedBlocks = [];\n    let bracketCount = 0;\n    let currentBlockParts = [];\n    for (let partIndex = 0; partIndex < inputParts.length; partIndex++) {\n        const part = inputParts[partIndex];\n        if (part === CLOSE_CURLY) {\n            bracketCount--;\n        }\n        if (bracketCount > 0) {\n            currentBlockParts.push(part);\n        }\n        else {\n            if (currentBlockParts.length > 0) {\n                escapedBlocks.push(currentBlockParts.join(''));\n                resultParts.push(BLOCK_PLACEHOLDER);\n                currentBlockParts = [];\n            }\n            resultParts.push(part);\n        }\n        if (part === OPEN_CURLY) {\n            bracketCount++;\n        }\n    }\n    if (currentBlockParts.length > 0) {\n        escapedBlocks.push(currentBlockParts.join(''));\n        resultParts.push(BLOCK_PLACEHOLDER);\n    }\n    return new StringWithEscapedBlocks(resultParts.join(''), escapedBlocks);\n};\nconst scopeCss = (cssText, scopeId, commentOriginalSelector) => {\n    const sc = new ShadowCss();\n    return sc.shimCssText(cssText, scopeId, scopeId + '-h', scopeId + '-s', commentOriginalSelector);\n};\n\nexport { ShadowCss, scopeCss };\n"],"sourceRoot":"webpack:///","file":"shadow-css-bbdf056f-05cd1ccb-js-es5.js"}